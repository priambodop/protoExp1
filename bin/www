#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('protoexp1:server');
var http = require('http');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
  * Create Socket.io Server
*/
var io = socketIO(server);

/**
  * Listen to socket.io connection
*/

io.on('connection', function(socket){
  console.log('Client has been connected to socket.io');
  socket.on('chat message', function(msg){
    io.emit('chat message', msg);
  }),
  socket.join('237', () => {
    let room = Object.keys(socket.rooms);
    console.log('client room is ' + room);
  }),
  socket.on('disconnect', () => {
    console.log('Client has been disconnected');
  }),
  socket.on('player join', function(msg){
    io.emit('player join', msg);
  }),
  socket.on('joining game', function(msg){
    io.emit('player joining', msg);
  }),
  socket.on('you join', function(msg){
    io.emit('you join', msg);
  }),
  socket.on('wrong code', function(msg){
    io.emit('you join', msg);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, (req, res) => {
  console.log("Listening to " + port);
});

//server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
